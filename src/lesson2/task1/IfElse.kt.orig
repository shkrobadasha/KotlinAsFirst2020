@file:Suppress("UNUSED_PARAMETER")

package lesson2.task1

import lesson1.task1.discriminant
import lesson1.task1.sqr
import kotlin.math.max
import kotlin.math.min
import kotlin.math.sqrt
import kotlin.math.min
import kotlin.math.abs

// Урок 2: ветвления (здесь), логический тип (см. 2.2).
// Максимальное количество баллов = 6
// Рекомендуемое количество баллов = 5
// Вместе с предыдущими уроками = 9/12

/**
 * Пример
 *
 * Найти число корней квадратного уравнения ax^2 + bx + c = 0
 */
fun quadraticRootNumber(a: Double, b: Double, c: Double): Int {
    val discriminant = discriminant(a, b, c)
    return when {
        discriminant > 0.0 -> 2
        discriminant == 0.0 -> 1
        else -> 0
    }
}

/**
 * Пример
 *
 * Получить строковую нотацию для оценки по пятибалльной системе
 */
fun gradeNotation(grade: Int): String = when (grade) {
    5 -> "отлично"
    4 -> "хорошо"
    3 -> "удовлетворительно"
    2 -> "неудовлетворительно"
    else -> "несуществующая оценка $grade"
}

/**
 * Пример
 *
 * Найти наименьший корень биквадратного уравнения ax^4 + bx^2 + c = 0
 */
fun minBiRoot(a: Double, b: Double, c: Double): Double {
    // 1: в главной ветке if выполняется НЕСКОЛЬКО операторов
    if (a == 0.0) {
        if (b == 0.0) return Double.NaN // ... и ничего больше не делать
        val bc = -c / b
        if (bc < 0.0) return Double.NaN // ... и ничего больше не делать
        return -sqrt(bc)
        // Дальше функция при a == 0.0 не идёт
    }
    val d = discriminant(a, b, c)   // 2
    if (d < 0.0) return Double.NaN  // 3
    // 4
    val y1 = (-b + sqrt(d)) / (2 * a)
    val y2 = (-b - sqrt(d)) / (2 * a)
    val y3 = max(y1, y2)       // 5
    if (y3 < 0.0) return Double.NaN // 6
    return -sqrt(y3)           // 7
}

/**
 * Простая (2 балла)
 *
 * Мой возраст. Для заданного 0 < n < 200, рассматриваемого как возраст человека,
 * вернуть строку вида: «21 год», «32 года», «12 лет».
 */
<<<<<<< .merge_file_a05852
fun ageDescription(age: Int): String {
    return when {
        (age in 11..19) or (age in 111..120) -> "$age лет"
        age % 10 == 1 -> "$age год"
        (age % 10 == 2) or (age % 10 == 3) or (age % 10 == 4) -> "$age года"
        else -> "$age лет"
    }
=======
fun ageDescription(age: Int): String = when{
    (age / 10 == 1 || age / 10 == 11 || age % 10 > 4 || age % 10 == 0) -> "$age лет"
    (age % 10 == 1) -> "$age год"
    else -> "$age года"
>>>>>>> .merge_file_a02152
}

/**
 * Простая (2 балла)
 *
 * Путник двигался t1 часов со скоростью v1 км/час, затем t2 часов — со скоростью v2 км/час
 * и t3 часов — со скоростью v3 км/час.
 * Определить, за какое время он одолел первую половину пути?
 */
fun timeForHalfWay(
    t1: Double, v1: Double,
    t2: Double, v2: Double,
    t3: Double, v3: Double
): Double {
<<<<<<< .merge_file_a05852
    val way = v1 * t1 + v2 * t2 + v3 * t3
    val halfofway = way * 0.5
    val onepart = v1 * t1
    val secondpart = v2 * t2
    return when {
        halfofway <= onepart -> (halfofway / v1)
        ((halfofway > onepart) && (halfofway <= (secondpart + onepart))) -> ((halfofway - onepart) / v2 + t1)
        halfofway > secondpart -> ((halfofway - (onepart + secondpart)) / v3 + t1 + t2)
        else -> 0.0
    }
=======
    val s1 = t1 * v1
    val s2 = t2 * v2
    val s3 = t3 * v3
    val sr = (s1 + s2 + s3) / 2
    if (sr < s1) return sr / v1
    if (sr > s1 && sr < s2 + s1) return t1 + (sr - s1) / v2
    return t1 + t2 + (sr - s1 - s2) / v3
>>>>>>> .merge_file_a02152
}

/**
 * Простая (2 балла)
 *
 * Нa шахматной доске стоят черный король и две белые ладьи (ладья бьет по горизонтали и вертикали).
 * Определить, не находится ли король под боем, а если есть угроза, то от кого именно.
 * Вернуть 0, если угрозы нет, 1, если угроза только от первой ладьи, 2, если только от второй ладьи,
 * и 3, если угроза от обеих ладей.
 * Считать, что ладьи не могут загораживать друг друга
 */
fun whichRookThreatens(
    kingX: Int, kingY: Int,
    rookX1: Int, rookY1: Int,
    rookX2: Int, rookY2: Int
): Int {
<<<<<<< .merge_file_a05852
    var result = 0
    if (kingX == rookX1 || kingY == rookY1) {
        result++
    }
    if (kingX == rookX2 || kingY == rookY2) {
        result += 2
    }
    return result
=======
    var u = 0
    if (rookX1 == kingX || rookY1 == kingY) u = u + 1
    if (rookX2 == kingX || rookY2 == kingY) u = u + 2
    return u
>>>>>>> .merge_file_a02152
}

/**
 * Простая (2 балла)
 *
 * На шахматной доске стоят черный король и белые ладья и слон
 * (ладья бьет по горизонтали и вертикали, слон — по диагоналям).
 * Проверить, есть ли угроза королю и если есть, то от кого именно.
 * Вернуть 0, если угрозы нет, 1, если угроза только от ладьи, 2, если только от слона,
 * и 3, если угроза есть и от ладьи и от слона.
 * Считать, что ладья и слон не могут загораживать друг друга.
 */
fun rookOrBishopThreatens(
    kingX: Int, kingY: Int,
    rookX: Int, rookY: Int,
    bishopX: Int, bishopY: Int
): Int {
<<<<<<< .merge_file_a05852
    val biX = (kingX - bishopX) * (kingX - bishopX)
    val biY = (kingY - bishopY) * (kingY - bishopY)
    var result = 0
    if (kingX == rookX || kingY == rookY) {
        result++
    }
    if (biX == biY) {
        result += 2
    }
    return result
=======
    var u = 0
    if (rookX == kingX || rookY == kingY) u = u + 1
    if (abs(kingX - bishopX) == abs(kingY - bishopY)) u = u + 2
    return u
>>>>>>> .merge_file_a02152
}

/**
 * Простая (2 балла)
 *
 * Треугольник задан длинами своих сторон a, b, c.
 * Проверить, является ли данный треугольник остроугольным (вернуть 0),
 * прямоугольным (вернуть 1) или тупоугольным (вернуть 2).
 * Если такой треугольник не существует, вернуть -1.
 */
fun triangleKind(a: Double, b: Double, c: Double): Int {
<<<<<<< .merge_file_a05852
    val max = maxOf(a, b, c)
    val min = minOf(a, b, c)
    val mid = (a + b + c) - min - max
    if ((max + min > mid) && (mid + max > min) && (mid + min > max)) {
        return when {
            sqr(max) == sqr(mid) + sqr(min) -> 1
            sqr(max) > sqr(mid) + sqr(min) -> 2
            else -> 0
        }
    }
    return -1
=======
    val m = max(max(a, b), c)
    val n = min(min(a, b), c)
    val k = a + b + c - m - n
    if (m >= n + k) return -1
    if (m * m == n * n + k * k) return 1
    if (m * m < n * n + k * k) return 0
    else return 2
>>>>>>> .merge_file_a02152
}


/**
 * Средняя (3 балла)
 *
 * Даны четыре точки на одной прямой: A, B, C и D.
 * Координаты точек a, b, c, d соответственно, b >= a, d >= c.
 * Найти длину пересечения отрезков AB и CD.
 * Если пересечения нет, вернуть -1.
 */
<<<<<<< .merge_file_a05852
fun segmentLength(a: Int, b: Int, c: Int, d: Int): Int {
    return if (min(b, d) >= max(a, c)) {
        min(b, d) - max(a, c)
    } else {
        -1
    }
}
=======


fun segmentLength(a: Int, b: Int, c: Int, d: Int): Int = when {
    a > c && b < d || c > a && d < b -> min(b - a, d - c)
    c > b || a > d -> -1
    else -> min(b - c, d - a)
}

>>>>>>> .merge_file_a02152
